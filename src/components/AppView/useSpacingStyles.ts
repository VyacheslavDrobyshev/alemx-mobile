import { StyleSheet, ViewStyle } from 'react-native';

import { AppViewProps } from './types';

export const useSpacingStyles = <T extends Partial<AppViewProps>>({
  margin,
  marginVertical,
  marginHorizontal,
  marginTop,
  marginRight,
  marginBottom,
  marginLeft,
  padding,
  paddingTop,
  paddingRight,
  paddingBottom,
  paddingLeft,
  paddingVertical,
  paddingHorizontal,
  backgroundColor,
  height,
  width,
  alignItems,
  alignSelf,
  justifyContent,
  flexDirection,
  flex,
  flexWrap,
  flexGrow,
  position,
  bottom,
  top,
  left,
  right,
  borderColor,
  borderWidth,
  borderRadius,
  borderTopRadius,
  borderBottomRadius,
  borderStyle,
  borderBottomWidth,
  borderTopWidth,
  borderRightWidth,
  borderLeftWidth,
  borderTopRightRadius,
  borderBottomRightRadius,
  borderTopLeftRadius,
  borderBottomLeftRadius,
  opacity,
  minWidth,
  maxWidth,
  minHeight,
  maxHeight,
  zIndex,
  overflow,
}: T) => {
  const { box } = StyleSheet.create({
    box: {
      ...(flexGrow !== undefined ? { flexGrow } : null),
      ...(margin !== undefined ? { margin } : null),
      ...(marginVertical !== undefined ? { marginVertical } : null),
      ...(marginHorizontal !== undefined ? { marginHorizontal } : null),
      ...(marginTop !== undefined ? { marginTop } : null),
      ...(marginBottom !== undefined ? { marginBottom } : null),
      ...(marginRight !== undefined ? { marginRight } : null),
      ...(marginLeft !== undefined ? { marginLeft } : null),
      ...(padding !== undefined ? { padding } : null),
      ...(paddingVertical !== undefined ? { paddingVertical } : null),
      ...(paddingHorizontal !== undefined ? { paddingHorizontal } : null),
      ...(paddingTop !== undefined ? { paddingTop } : null),
      ...(paddingBottom !== undefined ? { paddingBottom } : null),
      ...(paddingRight !== undefined ? { paddingRight } : null),
      ...(paddingLeft !== undefined ? { paddingLeft } : null),
      ...(backgroundColor !== undefined ? { backgroundColor } : null),
      ...(flex !== undefined ? { flex } : null),
      ...(flexWrap !== undefined ? { flexWrap } : null),
      ...(height !== undefined ? { height } : null),
      ...(width !== undefined ? { width } : null),
      ...(alignItems !== undefined ? { alignItems } : null),
      ...(alignSelf !== undefined ? { alignSelf } : null),
      ...(justifyContent !== undefined ? { justifyContent } : null),
      ...(flexDirection !== undefined ? { flexDirection } : null),
      ...(position !== undefined ? { position } : null),
      ...(bottom !== undefined ? { bottom } : null),
      ...(top !== undefined ? { top } : null),
      ...(left !== undefined ? { left } : null),
      ...(right !== undefined ? { right } : null),
      ...(borderColor !== undefined ? { borderColor } : null),
      ...(borderWidth !== undefined ? { borderWidth } : null),
      ...(borderRadius !== undefined ? { borderRadius } : null),
      ...(borderStyle !== undefined ? { borderStyle } : null),
      ...(borderBottomWidth !== undefined ? { borderBottomWidth } : null),
      ...(borderTopWidth !== undefined ? { borderTopWidth } : null),
      ...(borderRightWidth !== undefined ? { borderRightWidth } : null),
      ...(borderLeftWidth !== undefined ? { borderLeftWidth } : null),
      ...(borderTopRadius !== undefined
        ? {
            borderTopRightRadius: borderTopRadius,
            borderTopLeftRadius: borderTopRadius,
          }
        : null),
      ...(borderBottomRadius !== undefined
        ? {
            borderBottomRightRadius: borderBottomRadius,
            borderBottomLeftRadius: borderBottomRadius,
          }
        : null),
      ...(borderTopRightRadius !== undefined ? { borderTopRightRadius } : null),
      ...(borderTopLeftRadius !== undefined ? { borderTopLeftRadius } : null),
      ...(borderBottomRightRadius !== undefined
        ? { borderBottomRightRadius }
        : null),
      ...(borderBottomLeftRadius !== undefined
        ? { borderBottomLeftRadius }
        : null),
      ...(minHeight !== undefined ? { minHeight } : null),
      ...(maxHeight !== undefined ? { maxHeight } : null),
      ...(minWidth !== undefined ? { minWidth } : null),
      ...(maxWidth !== undefined ? { maxWidth } : null),
      ...(opacity !== undefined ? { opacity } : null),
      ...(zIndex !== undefined ? { zIndex } : null),
      ...(overflow !== undefined ? { overflow } : null),
    } as ViewStyle,
  });

  return { box };
};
